@page "/showdata"
@attribute [StreamRendering(true)]
@inject IWeatherForecastService WeatherForecastService

@using BlazorApp.Data;

<AppPageTitle>Weather forecast</AppPageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates displaying data and streaming rendering.</p>

<a class="btn btn-primary mb-4" href="/fetchdata">Try client-side "Fetch data"</a>

@if (forecasts is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private BlazorApp.WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate retrieving the data asynchronously.
        await Task.Delay(1000);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        
        forecasts = (await WeatherForecastService.GetWeatherForecasts(startDate)).ToArray();
    }
}
